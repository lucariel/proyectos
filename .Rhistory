#Parse Numbers
parse_double("1,23", locale = locale(decimal_mark = ","))
#Parse Numbers
parse_double("1.23")
#11 Data import
library(tidyverse)
parse_double("1,23", locale = locale(decimal_mark = ","))
#Parse Numbers
parse_double("1.23")
parse_number("It cost $123.45", locale = )
parse_number("It cost $123.45", locale = )
parse_number("It cost $123.45")
parse_number("It cost $123.456.789", locale = locale(grouping_mark = "."))
parse_number("It cost $123.456.789", locale = locale(grouping_mark = ";."))
parse_number("It cost $123.456.789", locale = locale(grouping_mark = "."))
#11.3.2 Strings
charToRaw("Hadley")
##You can change the encoding to others such as Latin1, Latin2 and ASCII
parse_character(x1, locale = locale(encoding = "Latin1"))
##You can change the encoding to others such as Latin1, Latin2 and ASCII
x1 <- "El Ni\xf1o was particularly bad this year"
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x1)
parse_character(x1, locale = locale(encoding = "Latin1"))
##To find the correct encoding: it's usually a metadata info, in case it's not there
guess_encoding(charToRaw(x1))
parse_character(x1, locale = locale(encoding = "ISO-8859-1"))
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
#11.3.3 Factors
##parse_factor(c(vector, to, parse),level=c(a1, a2, a3))
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
parse_datetime(20101010)
#parse_date() expects a four digit year, a - or /, the month, a - or /, then the day:
parse_date(20101010)
parse_date(2010-10-10)
parse_date("2010-10-10")
parse_date("20101010")
parse_datetime(20101010)
parse_datetime(20101310)
parse_datetime(20101210)
parse_date("01/02/15", "%m/%d/%y")
#> [1] "2015-01-02"
parse_date("01/02/15", "%d/%m/%y")
#> [1] "2015-02-01"
parse_date("01/02/15", "%y/%m/%d")
#> [1] "2001-02-15"
?locale()
parse_number("It cost $123.456.789", locale = locale(grouping_mark = ".", decimal_mark ="."))
parse_number("It cost $123.456,789", locale = locale(grouping_mark = ".", decimal_mark =","))
parse_number("It cost $123.456,789", locale = locale(grouping_mark = ".")
parse_number("It cost $123.456,789", locale = locale(grouping_mark = "."))
parse_number("It cost $123.456,789", locale = locale(grouping_mark = "."))
parse_number("It cost $123.456,789", locale = locale(decimal_mark = "."))
date_format(20101010)
?locale()
parse_date("01/02/15", locale = locale(date_format = "%m/%d/%y"))
locale("es", decimal_mark = ",")
parse_number("It cost $123.456,789", locale = "es")
es<-locale("es", decimal_mark = ",")
parse_number("It cost $123.456,789", locale =es)
#5.What’s the difference between read_csv() and read_csv2()?
?read_csv()
?read_csv2
?read_csv2()
t2 <- "11:15:10.12 PM"
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, "%B %d %Y")
parse_date(d1, "%B %d, %Y")
#7.Generate the correct format string to parse each of the following dates and times:
d1 <- "January 1, 2010"parse_date(d1, "%B %d, %Y")
parse_date(d2, "%Y-%m-%d")
parse_date(d2, "%Y-%b-%d")
parse_date(d3, "%d-%b-%Y")
parse_date(d4, "%B %d (%Y)")
parse_date(d5, "%b/%d/%y")
parse_date(d5, "%m/%d/%y")
parse_time(t1)
parse_time(t1, "%H%M")
parse_time(t2, "%Z")
parse_time(t2)
# Charge the circlize library
library(circlize)
# Make the circular plot
chordDiagram(as.data.frame(dat), transparency = 0.5)
name=c(3,10,10,3,6,7,8,3,6,1,2,2,6,10,2,3,3,10,4,5,9,10)
feature=paste("feature ", c(1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5) , sep="")
dat <- data.frame(name,feature)
dat <- with(dat, table(name, feature))
# Make the circular plot
chordDiagram(as.data.frame(dat), transparency = 0.5)
dat
name=c(3,10,10,3,6,7,8,3,6,1,2,2,6,10,2,3,3,10,4,5,9,10)
name
feature=paste("feature ", c(1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5) , sep="")
feature
dat <- data.frame(name,feature)
dat
# Make the circular plot
chordDiagram(as.data.frame(matriz1), transparency = 0.5)
library(tidyverse)
matriz1<-read.csv("matriz-insumo-producto.csv", skip = 5)
matriz1<-matriz1[,-c(2:3)]
matriz1<-read.csv("matriz-insumo-producto.csv", skip = 5)
setwd("~/Documents/R/Proyectos/Matriz IP")
matriz1<-read.csv("matriz-insumo-producto.csv", skip = 5)
matriz1<-matriz1[,-c(2:3)]
matriz1<-matriz1[c(1:124), c(2:125)]
rownames(matriz1)<-colnames(matriz1)
# Make the circular plot
chordDiagram(as.data.frame(matriz1), transparency = 0.5)
matriz1
# Make the circular plot
chordDiagram(as.data.frame(matriz1), transparency = 0.5)
class(matriz1$CULTIVOS.DE.CEREALES)
library(ellipse)
install.packages("ellipse")
install.packages("RColorBrewer")
##Here I encountered with some limitations: the gov reports 145 columns
#and 124 rows, so it's not really complete.
#The aditional columns corresponds to comex and social services which
#has no corresponden rows. I'll make it square to be able to work with it
library(ellipse)
library(RColorBrewer)
data=cor(mtcars)
# Build a Pannel of 100 colors with Rcolor Brewer
my_colors <- brewer.pal(5, "Spectral")
my_colors=colorRampPalette(my_colors)(100)
# Order the correlation matrix
ord <- order(data[1, ])
data_ord = data[ord, ord]
plotcorr(data_ord , col=my_colors[data_ord*50+50] , mar=c(1,1,1,1)  )
plotcorr(matriz1 , col=my_colors[data_ord*50+50] , mar=c(1,1,1,1)  )
?plotcorr()
totals <- colSums(matriz1)
#Lets transform the matrix so far in a corraltion matrix
sum(c(1,3,4), c(2,3,4))
?colSums()
x<-matriz1
tapply(x, list(group[row(x)], col(x)), sum)
install.packages("adorn")
install.packages("Janitor")
install.packages("janitor")
library(janitor)
dd <- addmargins(matriz1, FUN = list(Total = sum), quiet = TRUE)
?addmarings()
?addmargins()
#Lets transform the matrix so far in a corraltion matrix
x<-as.table(matriz1)
adorn_totals(matriz1)
matriz1<-read.csv("matriz-insumo-producto.csv", skip = 5)
matriz1<-matriz1[,-c(2:3)]
matriz1<-matriz1[c(1:124), c(2:125)]
adorn_totals(matriz1)
rownames(matriz1)<-colnames(matriz1)
#Lets transform the matrix so far in a corraltion matrix
x<-table(matriz1)
#Lets transform the matrix so far in a corraltion matrix
x<-as.inputoutput(matriz1$)
#Lets transform the matrix so far in a corraltion matrix
x<-as.inputoutput(matriz1)
#Lets transform the matrix so far in a corraltion matrix
install.packages("ioanalysis")
#Lets transform the matrix so far in a corraltion matrix
as.matrix(matriz1)
#Lets transform the matrix so far in a corraltion matrix
x<-as.matrix(matriz1)
class(matriz1)
sum(matriz1$CULTIVOS.DE.CEREALES)
View(matriz1)
class(matriz1$CULTIVOS.DE.CEREALES)
class(x)
x
?data.matrix
#Lets transform the matrix so far in a corraltion matrix
x<-data.matrix(matriz1)
x
z<-as.tibble(x)
z$CULTIVOS.DE.CEREALES
class(z$CULTIVOS.DE.CEREALES)
x<-as.tibble(data.matrix(matriz1))
class(matriz1$CULTIVOS.DE.CEREALES)
y<-rbind(x, c("Total", colSums(x[,])))
y
View(y)
rownames(matriz1)<-colnames(matriz1)
View(matriz1)
x<-as.tibble(data.matrix(matriz1))
y<-rbind(x, c("Total", colSums(x[,])))
View(y)
View(x)
rownames(x)<-colnames(x)
View(y)
y<-rbind(x, c(colSums(x[,])))
View(y)
y<-rbind(x, c(colSums(x[,])))
View(y)
y["125"]
y$125
y["'125'"]
rownames(y)
y["125"]
y[`125`]
y[,]
y[,125]
y[,124]
y[125,]
tail(y)
tail(y,1)
tail(y)
class(tail(y))
View(tail(y))
View(tail(y),1)
View(tail(y),2)
rownames(y)
View(tail(y,2))
View(tail(y,1))
totals<-tail(y,1)
totals
y<-y[,-1]
ncol(y)
x<-as.tibble(data.matrix(matriz1))
y<-rbind(x, c(colSums(x[,])))
class(totals)
class(as.vector(totals))
k<-x/total
k<-x/totals
t(apply(x, 1, function(x) x/totals))
View(t(apply(x, 1, function(x) x/totals)))
x
View(x)
View(totals)
class(x$CULTIVOS.DE.CEREALES)
class(totals$CULTIVOS.DE.CEREALES)
totals<-as.vector(totals)
class(totals)
class(c(1,2,3))
total<-as.numeric(totals[1,])
total
class(total)
k<-x/total
View(k)
#and now k is a correlation matrix
corrplot(k)
#and now k is a correlation matrix
library(corrplot)
corrplot(k)
ncol(k)
nrow(k)
corrplot(as.matrix(k))
corrplot(as.matrix(k), method = "circle")
colnames(k)<-c(1:ncol(k))
View(k)
corrplot(as.matrix(k), method = "circle")
install.packages("zoom")
library(zoom)
corrplot(as.matrix(k), method = "circle")
##14.3 Matching patterns with regular expressions
##14.3.1 Basic matches
x <- c("apple", "banana", "pear")
str_view(x, "an")
str_view(x, ".a.")
g<-c("\", "\\", "\\\")
g<-c('\')
g<-c('\''
)
g<-c('\'')
g
g<-c('"\"'')
##1.Explain why each of these strings don’t match a \: "\", "\\", "\\\".
#"\" is the escape character so the string "\" cannot be made, you have to scape the scape
c("\\")
##1.Explain why each of these strings don’t match a \: "\", "\\", "\\\".
#"\" is the escape character so the string "\" cannot be made, you have to scape the scape
c("\/\")
##1.Explain why each of these strings don’t match a \: "\", "\\", "\\\".
#"\" is the escape character so the string "\" cannot be made, you have to scape the scape
c("\\")
##1.Explain why each of these strings don’t match a \: "\", "\\", "\\\".
#"\" is the escape character so the string "\" cannot be made, you have to scape the scape
c("\\\")
##1.Explain why each of these strings don’t match a \: "\", "\\", "\\\".
#"\" is the escape character so the string "\" cannot be made, you have to scape the scape
c("\\\\")
str(c("\\\\"))
str(c("\\"))
writeLines(c("\\"))
str_view("\\")
str_view(c, "\\")
c<-c("\\")
str_view(c, "\\")
str_view(c, "\\\")
str_view(c, "\\\\")
str_view(c, "\\\\")
str_view(c, "\\")
#2.How would you match the sequence "'\?
c<-c("\"\'\?")
#2.How would you match the sequence "'\?
c<-c("\"\'\?")
#2.How would you match the sequence "'\?
c<-c(""\"\'\?")
#2.How would you match the sequence "'\?
c<-c(""\"\'\?"))
#2.How would you match the sequence "'\?
c<-c(""\"\'\?")
#2.How would you match the sequence "'\?
c<-c("\"\'\\")
c
writeLine(c)
writeLines(c)
#2.How would you match the sequence "'\?
c<-c("\"\'\\\?")
#2.How would you match the sequence "'\?
c<-c("\"\'\\?")
writeLines(c)
str_view(c, \"\'\\\?")
str_view(c, "\"\'\\\?")
str_view(c, "\"\'\\?")
str_view(c, "\"\'\\?")
writeLines(c)
str_view(c, "\"\'\\?")
str_view(c, "\\\"\'\\?")
str_view(c, "\\\\")
str_view(c, "\"\'\\\\")
str_view(c, "\"\'\\\\?")
str_view(c, "\"\'\\\\\?")
str_view(c, "\"\'\\\\?\")
str_view(c, "\"\'\\\\?")
str_view(c, "\"\'\\\\?")
str_view(c, "\"\'\\\\\?")
str_view(c, "\"\'\\\\?")
str_view(c, "\"\'\\\\")
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,"\..\..\..")
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,""\..\..\..")
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,"\..\..\..")
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,"..\..\..")
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,"\..\..\..")
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,'\..\..\..')
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,'\.')
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,'.')
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,'.\')
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,'.')
#3.What patterns will the regular expression \..\..\.. match? How would you represent it as a string?
str_view(c,'.')
source('~/Documents/R/R for Data Science/14Strings.R', echo=TRUE)
str_view(c, "\"\'\\\\")
