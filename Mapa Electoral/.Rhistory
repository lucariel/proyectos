facet_grid(relig)
## with a visualisation you could make a facet plot
##First change de levels of relig
gss_cat7<-gss_cat%>%
mutate(
relig_factor = factor(rincome, levels = c("Protestant"))
)
gss_cat7%>%ggplot(aes(denom))+geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(relig_factor)
## with a visualisation you could make a facet plot
##First change de levels of relig
gss_cat7<-gss_cat%>%
mutate(
relig_factor = factor(rincome, levels = c("Protestant"))
)
gss_cat7%>%ggplot(aes(denom))+geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(relig_factor)
gss_cat7%>%ggplot(aes(denom))+geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(gss_cat7$relig_factor)
dnoems<-gss_cat%>%
count(relig)
dnoems
## with a visualisation you could make a facet plot
##First change de levels of relig
gss_cat7<-gss_cat%>%
mutate(
relig_factor = factor(rincome, levels = c("Protestant"))
)
gss_cat7%>%ggplot(aes(denom))+geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(relig_factor)
View(gss_cat7)
## with a visualisation you could make a facet plot
##First change de levels of relig
gss_cat7<-gss_cat%>%
mutate(
relig_factor = factor(relig, levels = c("Protestant"))
)
gss_cat6<-gss_cat%>%
filter(relig!="Protestant")%>%
count(denom)
## with a visualisation you could make a facet plot
##First change de levels of relig
gss_cat7<-gss_cat%>%
mutate(
relig_factor = factor(relig, levels = c("Protestant"))
)
View(gss_cat7)
gss_cat7%>%ggplot(aes(denom))+geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(relig_factor)
gss_cat7%>%ggplot(aes(denom))+geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(gss_cat7$relig_factor)
colnames(gss_cat7)
View(gss_cat)
source('~/Documents/R/R for Data Science/15Factors.R', echo=TRUE)
View(gss_cat)
gss_cat%>%group_by(year, partyid)%>%summarise(n = n())
gss_cat9<-gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer", "Don't know", "Other party"),
rep = c("Strong republican", "Not str republican"),
ind = c("Ind,near rep", "Independent", "Ind,near dem"),
dem = c("Not str democrat", "Strong democrat")
)) %>%
count(partyid)
gss_cat9%>%group_by(year, partyid)%>%summarise(n = n())
gss_cat9<-gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer", "Don't know", "Other party"),
rep = c("Strong republican", "Not str republican"),
ind = c("Ind,near rep", "Independent", "Ind,near dem"),
dem = c("Not str democrat", "Strong democrat")
))
gss_cat9%>%group_by(year, partyid)%>%summarise(n = n())
specie=c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition=rep(c("normal" , "stress" , "Nitrogen") , 4)
value=abs(rnorm(12 , 0 , 15))
data=data.frame(specie,condition,value)
data
gss_cat9
gss_cat9%>%
group_by(year, partyid)%>%
summarise(n = n())#%>%
gss_cat9%>%
group_by(year, partyid)%>%
summarise(n = n())%>%
ggplot(aes(fill = partyid, y = n, x = year))+
geom_bar(stat="identity", position="fill" )
count(gss_cat$rincome)
gss_cat$rincome%>%
count()
gss_cat%>%
count(rincome)
rincome_list<-gss_cat%>%
count(rincome)
rincome_list <- rincome_list$rincome
rincome_list
gss_cat10<-gss_cat %>%
mutate(partyid = fct_collapse(rincome,
no_data= c("No answer", "Don't know", "Refused"),
zero_10k= c("Lt $1000", "$1000 to 2999", "$3000 to 3999",
"$4000 to 4999","$5000 to 5999","$6000 to 6999",
"$7000 to 7999", "$8000 to 9999"),
k10_k25 = c("$10000 - 14999", "$15000 - 19999", "$20000 - 24999")
k25_more = "$25000 or more"
)) %>%
count(rincome)
gss_cat10<-gss_cat %>%
mutate(partyid = fct_collapse(rincome,
no_data= c("No answer", "Don't know", "Refused"),
zero_10k= c("Lt $1000", "$1000 to 2999", "$3000 to 3999",
"$4000 to 4999","$5000 to 5999","$6000 to 6999",
"$7000 to 7999", "$8000 to 9999"),
k10_k25 = c("$10000 - 14999", "$15000 - 19999", "$20000 - 24999"),
k25_more = "$25000 or more"
)) %>%
count(rincome)
gss_cat10
gss_cat10<-gss_cat %>%
mutate(rincome = fct_collapse(rincome,
no_data= c("No answer", "Don't know", "Refused"),
zero_10k= c("Lt $1000", "$1000 to 2999", "$3000 to 3999",
"$4000 to 4999","$5000 to 5999","$6000 to 6999",
"$7000 to 7999", "$8000 to 9999"),
k10_k25 = c("$10000 - 14999", "$15000 - 19999", "$20000 - 24999"),
k25_more = "$25000 or more"
)) %>%
count(rincome)
gss_cat10
hist(gss_cat10)
ggplot(gss_cat10, aes(rincome)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
rincome_list
gss_cat10<-gss_cat %>%
mutate(rincome = fct_collapse(rincome,
no_data= c("No answer", "Don't know", "Refused", "Not applicable"),
zero_10k= c("Lt $1000", "$1000 to 2999", "$3000 to 3999",
"$4000 to 4999","$5000 to 5999","$6000 to 6999",
"$7000 to 7999", "$8000 to 9999"),
k10_k25 = c("$10000 - 14999", "$15000 - 19999", "$20000 - 24999"),
k25_more = "$25000 or more"
)) %>%
count(rincome)
ggplot(gss_cat10, aes(rincome)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gss_cat10
gss_cat10%>%ggplot(aes(x =rincome, y = n ))+geom_bar()
gss_cat10%>%ggplot(aes(x =rincome ))+geom_bar()
gss_cat10%>%ggplot(aes(x =n ))+geom_bar()
gss_cat10
##or maby all non numerical values
income_level3<-c("Lt $1000",
"$1000 to 2999","$3000 to 3999","$4000 to 4999","$5000 to 5999",
"$6000 to 6999","$7000 to 7999","$8000 to 9999","$10000 - 14999","$15000 - 19999",
"$20000 - 24999","$25000 or more")
gss_cat4<-gss_cat%>%
mutate(
rincome_factor = factor(rincome, levels = income_level3)
)%>%
filter(!is.na(rincome_factor))
ggplot(gss_cat4, aes(rincome_factor)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(gss_cat10, aes(rincome)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gss_cat10<-gss_cat %>%
mutate(rincome = fct_collapse(rincome,
no_data= c("No answer", "Don't know", "Refused", "Not applicable"),
zero_10k= c("Lt $1000", "$1000 to 2999", "$3000 to 3999",
"$4000 to 4999","$5000 to 5999","$6000 to 6999",
"$7000 to 7999", "$8000 to 9999"),
k10_k25 = c("$10000 - 14999", "$15000 - 19999", "$20000 - 24999"),
k25_more = "$25000 or more"
))
ggplot(gss_cat10, aes(rincome)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#21 Iteration
library(tidyverse)
#a)Compute the mean of every column in mtcars.
head(mtcars)
#a)Compute the mean of every column in mtcars.
col(mtcars)
#a)Compute the mean of every column in mtcars.
colname(mtcars)
#a)Compute the mean of every column in mtcars.
ncol(mtcars)
mtcars[1]
#a)Compute the mean of every column in mtcars.
head(mtcars)
mtcars[2]
mtcars[,1]
mtcars[,2]
#a)Compute the mean of every column in mtcars.
head(mtcars)
mtcars[,1]
for (i in ncol(mtcars)):
mean(mtcars[,i])
for (i in ncol(mtcars)):
mean(mtcars[,i])
for (i in ncol(mtcars)){
mean(mtcars[,i])
}
for (i in ncol(mtcars)){
mtcars_mean[,i]<-mean(mtcars[,i])
}
head(mtcars_mean)
#a)Compute the mean of every column in mtcars.
mtcars_mean=mtcars
for (i in ncol(mtcars)){
mtcars_mean[,i]<-mean(mtcars[,i])
}
head(mtcars_mean)
head(mtcars_mean)
for (i in ncol(mtcars)){
mtcars_mean[,i]<-mean(mtcars[,i])
}
head(mtcars_mean)
x<-mean(mtcars[,i])
for (i in ncol(mtcars)){
x<-mean(mtcars[,i])
}
head(x)
mtcars_mean[,1]=1
mtcars_mean
mtcars_mean[,2]=1
mtcars_mean
for (i in ncol(mtcars)){
mtcars_mean[,i]<-mean(mtcars[,i])
}
mtcars_mean
head(mtcars_mean,1)
head(mtcars,1)
for (i in ncol(mtcars)){
mtcars_mean[,i]<-mean(mtcars[,i])
}
mtcars_mean
mtcars_m[,i]<-mean(mtcars[,i])
for (i in ncol(mtcars)){
mtcars_m[,i]<-mean(mtcars[,i])
}
for (i in ncol(mtcars)){
c(mean(mtcars[,i]))
}
ca<-c()
ca
for (i in ncol(mtcars)){
ca<-c(ca,(mean(mtcars[,i])))
}
ca
for (i in 1:ncol(mtcars)){
mtcars_m[,i]<-mean(mtcars[,i])
}
for (i in 1:ncol(mtcars)){
mtcars_mean[,i]<-mean(mtcars[,i])
}
head(mtcars_mean)
head(mtcars_mean,1)
#b)Determine the type of each column in nycflights13::flights.
names(flights)
#b)Determine the type of each column in nycflights13::flights.
names(nycflights13::flights)
#b)Determine the type of each column in nycflights13::flights.
types<-names(nycflights13::flights)
types<-names(nycflights13::flights)
for(i in 1:ncol(nycflights13::flights)){
types[i]<-typeof(nycflights13::flights)
}
types
types<-names(nycflights13::flights)
for(i in 1:ncol(nycflights13::flights)){
types[i]<-class(nycflights13::flights)
}
types
for(i in names(nycflights13::flights)){
types[i]<-class(nycflights13::flights)
}
for(i in names(nycflights13::flights)){
types[i]<-class(nycflights13::flights)
}
types
types<-names(nycflights13::flights)
for(i in 1:ncol(nycflights13::flights)){
types[i]<-typeof(nycflights13::flights)
}
types
for(i in 1:ncol(nycflights13::flights)){
types[i]<-class(nycflights13::flights[,i])
}
types
for(i in 1:ncol(nycflights13::flights)){
types[i]<-typeof(nycflights13::flights[,i])
}
types
typeof(nycflights13::flights[,1]
typeof(nycflights13::flights[,1])
typeof(nycflights13::flights[,1])
nycflights13::flights[,1]
typeof(nycflights13::flights[1,])
flights[1,]
nycflights13::flights[1,]
nycflights13::flights[,1]
typeof(c(nycflights13::flights[,1]))
c(nycflights13::flights[,1])
class(c(nycflights13::flights[,1]))
a<-(c(nycflights13::flights[,1]))
class(a)
a
sapply(nycflights13::flights, class)
class(nycflights13::flights[1])
class(nycflights13::flights[1])
class(nycflights13::flights[1][1])
class(nycflights13::flights[1][1][1])
class(nycflights13::flights$year)
class(nycflights13::flights["year"])
(nycflights13::flights["year"])
(nycflights13::flights$year)
names<-names(nycflights13::flights)
for(i in types){
types[i]<-typeof(unlist(nycflights13::flights[,i]))
}
types
typeof(unlist(nycflights13::flights[,1]))
types<-names(nycflights13::flights)
for(i in 1:ncol(nycflights13::flights)){
types[i]<-typeof(unlist(nycflights13::flights[,i]))
}
types
#c)Compute the number of unique values in each column of iris.
iris
unique(iris$Sepal.Length)
count(unique(iris$Sepal.Length))
length(unique(iris$Sepal.Length))
#c)Compute the number of unique values in each column of iris.
iris[1.]
#c)Compute the number of unique values in each column of iris.
iris[1,]
#c)Compute the number of unique values in each column of iris.
unique<-iris[1,]
unique
unique[1]="asd"
unique
unique[2]=65
unique
ncol(unique)==ncol(iris)
length(unique(iris[,1])
)
length(unique(iris[,1]))
for(i in 1:ncol(iris)){
unique[i]<-length(unique(iris[,1]))
}
unique
unique<-iris[1,]
for(i in 1:ncol(iris)){
unique[i]<-length(unique(iris[,i]))
}
unique
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
acc <- (85+10)/1000
acc
prec<-85/(85+890)
recall<-85/(85+15)
f<-(2*prec*recall)/(prec+recall)
f
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
disp = function(x) x * 0.0163871,
am = function(x) {
factor(x, labels = c("auto", "manual"))
}
df
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = c("a","b","c","d","e","f","g","h","i","j")
)
col_summary(df, mean)
#2.Adapt col_summary() so that it only applies to numeric columns You might want to start with an is_numeric() function that returns a logical vector that has a TRUE corresponding to each numeric column.
col_summary <- function(df, fun) {
out <- vector("double", length(df))
for (i in seq_along(df)) {
if(is.numeric(df[[i]])){
out[i] <- fun(df[[i]])
}
}
out
}
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = c("a","b","c","d","e","f","g","h","i","j")
)
col_summary(df, mean)
is.numeric(df[[2]])
is.numeric(df[[5]])
#2.Adapt col_summary() so that it only applies to numeric columns You might want to start with an is_numeric() function that returns a logical vector that has a TRUE corresponding to each numeric column.
col_summary <- function(df, fun) {
out <- vector("double", length(df))
for (i in seq_along(df)) {
if(is_numeric(df[[i]])){
out[i] <- fun(df[[i]])
}
}
out
}
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = c("a","b","c","d","e","f","g","h","i","j")
)
col_summary(df, mean)
#2.Adapt col_summary() so that it only applies to numeric columns You might want to start with an is_numeric() function that returns a logical vector that has a TRUE corresponding to each numeric column.
col_summary <- function(df, fun) {
out <- vector("double", length(df))
for (i in seq_along(df)) {
if(is.numeric(df[[i]])){
out[i] <- fun(df[[i]])
}
}
out
}
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = c("a","b","c","d","e","f","g","h","i","j")
)
col_summary(df, mean)
is.numeric(df[[2]])
#2.Adapt col_summary() so that it only applies to numeric columns You might want to start with an is_numeric() function that returns a logical vector that has a TRUE corresponding to each numeric column.
col_summary <- function(df, fun) {
out <- vector("double", length(df))
for (i in seq_along(df)) {
#if(is.numeric(df[[i]])){
out[i] <- fun(df[[i]])
#}
}
out
}
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = c("a","b","c","d","e","f","g","h","i","j")
)
col_summary(df, mean)
source('~/Documents/Cuantitativo/R/Proyectos/Mapa Electoral/mapa_electoral.R', echo=TRUE)
map_PJ_07
map_PJ_09
elecciones2011_xpcia_11fpv
unique(elecciones2011_xpcia$partido)
elecciones2011_xpcia$partido[elecciones2011_xpcia$partido%>%grepl("JUST.", .)]
elecciones2011_xpcia
elecciones2011_xpcia%>%filter(votos_porcentaje>0.1)
View(elecciones2011_xpcia%>%filter(votos_porcentaje>0.1))
sum(elecciones2011_xpcia$votos, na.rm =T)
##Checking if they are all in same scale
sum(elecciones2017_xpcia$votos)
sum(elecciones2007_xpcia$votos)
sum(elecciones2011_xpcia$votos)
sum(elecciones2015_xpcia$votos)
elecciones2011_xpcia<-elecciones2011%>%
group_by(provincia,provinciaId, partido, eleccion)%>%
summarise(votos = sum(votos, na.rm = T))
elecciones2011_xpcia<-elecciones2011_xpcia[!duplicated(elecciones2011_xpcia$partido),]
elecciones2011_xpcia
sum(elecciones2011_xpcia$votos, na.rm =T)
elecciones2011<-read_delim("./datasets/2011-generales.csv", delim = ",")
unique(elecciones2011$eleccion)
elecciones2015<-read_delim("./datasets/elecciones2015.csv", delim = ",")
elecciones2011<-elecciones2011%>%
filter(!grepl("VOTOS",partido), !grepl("TOTAL VOTANTES", partido))
sum(elecciones$votos, na.rm = T)
sum(elecciones2011$votos, na.rm = T)
